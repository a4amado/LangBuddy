generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id          String    @id @default(cuid())
    title       String
    content     String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    createdBy   User?     @relation(fields: [createdById], references: [id], onDelete: SetNull)
    createdById String?
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model UserLanguage {
    id       String       @id @default(cuid())
    language String
    rank     LanguageRank
    userId   String      
    user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([id])
}

enum LanguageRank {
    MOTHER
    OTHER
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    isBoarded     Boolean        @default(false)
    lastSeen      DateTime       @default(now())
    country       String?
    createdAt     DateTime       @default(now())
    
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    chats         Chat[]
    messages      Message[]      @relation("UserMessages")
    chatMembers   ChatMember[]
    languages     UserLanguage[]
    profile       Profile?
    authSessions  AuthSession[]
    authKeys      AuthKey[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Profile {
    userId   String @id @unique
    bio      String
    hobbies  String
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum ChatType {
    DIRECT
    GROUP
}

model Chat {
    id            String      @id @default(cuid())
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    type          ChatType    @default(DIRECT)
    lastMessageId String?    
    lastMessage   Message?    @relation("LastMessage", fields: [lastMessageId], references: [id], onDelete: Cascade)
    
    users         User[]
    messages      Message[]   @relation("ChatMessages")
    members       ChatMember[]
}

model Message {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    content   String
    senderId  String?  
    chatId    String   
    
    sender    User?     @relation("UserMessages", fields: [senderId], references: [id], onDelete: SetNull)
    chat      Chat      @relation("ChatMessages", fields: [chatId], references: [id], onDelete: Cascade)
    lastInChat Chat[]   @relation("LastMessage")
}

model BlockedUser {
    user1Id String
    user2Id String

    @@unique([user1Id, user2Id])
}

model ChatMember {
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String  
    chatId    String  
    isBoarded Boolean  @default(false)
    
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    chat      Chat     @relation(fields: [chatId], references: [id])

    @@unique([chatId, userId])
}

model AuthSession {
    id            String @id @unique
    userId        String
    activeExpires BigInt
    idleExpires   BigInt
    user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model AuthKey {
    id             String  @id @unique
    hashedPassword String?
    userId         String 
    user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}