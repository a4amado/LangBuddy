// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        String      @id @default(cuid())
    title      String
    content      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User?   @relation(fields: [createdById], references: [id], onDelete: SetNull)
    createdById String?

}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model UsersLanguage {
    id String @id @default(cuid())
    language String
    rank LanguageRank
    user_id String
    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@index([id])
}

enum LanguageRank {
    mother
    other
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid()) @unique
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    boarded Boolean @default(false)
    latestSeen DateTime @default(now())
    accounts      Account[]
    sessions      Session[]
    posts         Post[]

    country String?

    Chat Chat[]

    ChatMessege ChatMessege[]

    ChatMember ChatMember[]

    UsersLanguage UsersLanguage[]

    Profile Profile?

    auth_session  AuthSession[]
    key           AuthKey[]
    created_at    DateTime  @default(now())
}

model Profile {
    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id String @id @unique
    bio String
    hobbies String
    @@index([user_id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum ChatType {
    CHAT
    GROUP
}
model Chat {
    id String @id @default(cuid())
    createdAt              DateTime            @default(now())
    updatedAt              DateTime            @updatedAt
    users User[]

    type ChatType @default(CHAT)

    lastMessege  ChatMessege? @relation("lastMessege",fields: [last_messege_id], references: [id], onDelete: Cascade)
    last_messege_id String?

    ChatMessege ChatMessege[]
    ChatMember ChatMember[]
}

model ChatMessege {
    id String @id @default(cuid())

    createdAt              DateTime            @default(now())
    updatedAt              DateTime            @updatedAt
    content String
    sender User? @relation(fields: [sender_id], references: [id], onDelete: SetNull)
    sender_id String?

    chat Chat @relation(fields: [chat_id], references: [id], onDelete: Cascade)
    chat_id String



    Chat Chat[] @relation("lastMessege")
}

model blocked {
    
    user_1_id String

    user_2_id String

    @@unique([user_1_id, user_2_id])
}

model ChatMember {
    createdAt              DateTime            @default(now())
    updatedAt              DateTime            @updatedAt

    user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id String

    boarded Boolean @default(false)

    chat Chat @relation(fields: [chat_id], references: [id])
    chat_id String

    @@unique([chat_id, user_id])

}

model AuthSession {
    id             String @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt
    user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
}

model AuthKey {
    id              String  @id @unique
    hashed_password String?
    user_id         String
    user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
}







